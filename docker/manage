#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host codenvy/che-ip)}
set -e

SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF
    
      Usage: $0 [command] [options]
    
      Commands:
    
      build - Build the docker images for the project.
              
      start - Creates the application containers from the built images
              and starts the services based on the docker-compose.yml file.
    
              You can pass in a list of containers to start.  
              By default all containers will be started.
              
              The API_URL used by tob-web can also be redirected.
    
              Examples:
              $0 start
              $0 start server
              $0 start app
    
      stop - Stops the services.  This is a non-destructive process.  The containers
             are not deleted so they will be reused the next time you run start.
    
      rm - Remove project containers and associated volumes.
    
EOF
  exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
DEFAULT_CONTAINERS="server app"

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------

# build-server() {

# }

# build-app() {

# }

# buildImages() {
#   build-server
#   build-app
# }

configureEnvironment() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export $line
      fi
    done <.env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  # server
  export PORT=${PORT-7000}
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
  export LEDGER_PROTOCOL_VERSION=${LEDGER_PROTOCOL_VERSION-}
  export GENESIS_URL=${GENESIS_URL-}
}

getStartupParams() {
  CONTAINERS=""
  ARGS="--force-recreate"

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose rm -svf >/dev/null

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$(toLower ${1})
shift

case "${COMMAND}" in
start)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose up ${_startupParams}
  ;;
stop)
  configureEnvironment
  docker-compose stop
  ;;
rm)
  configureEnvironment
  deleteVolumes
  ;;
build)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose build
#   case "$@" in
#   server)
#     build-server
#     ;;
#   app)
#     app
#     ;;
#   *)
#     buildImages
#     ;;
#   esac
  ;;
*)
  usage
  ;;
esac

popd >/dev/null